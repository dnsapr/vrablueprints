formatVersion: 1
name: k8s-containerd
version: 1
inputs:
  nodename:
    type: string
    title: Имя ноды
  kubever:
    title: Версия кубернетеса
    type: number
    default: 1.32
  os:
    type: object
    title: OperSystem
    $ref: /ref/property-groups/imagesLinux
  resources:
    type: object
    title: Выбор ресурса
    description: Выбор вычеслительного ресурса
    $ref: /ref/property-groups/resourceZone
  vcpu:
    type: object
    title: vCPU
    description: ЦП
    $ref: /ref/property-groups/cpu
  mem:
    type: integer
    title: RAM Gb
    description: Оперативная память
    minimum: 1
    default: 1
  datastore:
    type: object
    title: Хранилище дисков
    $ref: /ref/property-groups/dsOnprem
  diskOSsize:
    type: integer
    title: Размер диска
    description: Размер первого диска в Гигабайтах
    minimum: 10
########## RESOURCES ##########
resources:
########## VM ##########
  k8s_node:
    type: Cloud.vSphere.Machine
    allocatePerInstance: true
    properties:
      ${resource.k8s_node.osType}: LINUX
      name: ${input.nodename}
      image: ${input.os.imglnx}
      cpuCount: ${input.vcpu.cpu}
      coreCount: ${input.vcpu.cores}
      totalMemoryMB: ${(input.mem) *1024}
      constraints:
        - tag: ${input.resources.resourcePlaces}
      cloudConfig: |
        #cloud-config
        hostname: ${input.nodename}
        write_files:
          - path: /etc/sysctl.d/k8s.conf
            content: |
              net.ipv4.ip_forward = 1  
              net.bridge.bridge-nf-call-iptables = 1  
              net.bridge.bridge-nf-call-ip6tables = 1
          - path: /etc/modules-load.d/k8s.conf
            content: |
              br_netfilter
        apt:
          sources:
            docker.list:
              keyid: '9dc858229fc7dd38854ae2d88d81803c0ebfcd88'
              keyserver: 'hkp://keyserver.ubuntu.com:80'
              source: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable'
        packages:
          - containerd.io
        runcmd:
          - modprobe br_netfilter
          - sysctl --system
          - containerd config default | sudo tee /etc/containerd/config.toml
          - sed "s/SystemdCgroup = false/SystemdCgroup = true/g" -i "/etc/containerd/config.toml"
          - sed '/pause:3.8/s/3.8/3.10/' -i /etc/containerd/config.toml
          - systemctl restart containerd.service
          - curl -fsSL https://pkgs.k8s.io/core:/stable:/v${input.kubever}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${input.kubever}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          - apt update
          - apt install kubectl kubelet kubeadm -y
          - systemctl enable --now kubelet.service
      storage:
        constraints:
          - tag: ${input.datastore.datastores}
        bootDiskCapacityInGB: ${input.diskOSsize}
        provisioningType: ${input.datastore.provisioning}
  ########## NETWORK ##########
      networks:
        - network: ${resource.Cloud_vSphere_Network_1.id}
  Cloud_vSphere_Network_1:
    type: Cloud.vSphere.Network
    properties:
      networkType: existing
